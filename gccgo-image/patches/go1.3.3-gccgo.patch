diff -urN go.orig/src/cmd/cgo/main.go go/src/cmd/cgo/main.go
--- go.orig/src/cmd/cgo/main.go	2014-10-01 01:50:20.000000000 +0000
+++ go/src/cmd/cgo/main.go	2014-11-22 06:05:22.860520921 +0000
@@ -130,15 +130,25 @@
 }
 
 var ptrSizeMap = map[string]int64{
-	"386":   4,
-	"amd64": 8,
-	"arm":   4,
+	"386":     4,
+	"amd64":   8,
+	"arm":     4,
+	"ppc":     4,
+	"ppc64":   8,
+	"ppc64le": 8,
+	"s390":    4,
+	"s390x":   8,
 }
 
 var intSizeMap = map[string]int64{
-	"386":   4,
-	"amd64": 8,
-	"arm":   4,
+	"386":     4,
+	"amd64":   8,
+	"arm":     4,
+	"ppc":     4,
+	"ppc64":   8,
+	"ppc64le": 8,
+	"s390":    4,
+	"s390x":   8,
 }
 
 var cPrefix string
diff -urN go.orig/src/cmd/cgo/Makefile go/src/cmd/cgo/Makefile
--- go.orig/src/cmd/cgo/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/cgo/Makefile	2014-11-22 06:05:22.860520921 +0000
@@ -0,0 +1,24 @@
+# Copyright 2009 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+TARG=cgo
+GOFLAGS=-g
+LDFLAGS=-static-libgo -static-libgcc
+GOFILES=ast.go gcc.go godefs.go main.go out.go util.go zdefaultcc.go
+
+build: $(TARG)
+
+$(TARG): $(GOFILES)
+	gccgo -o $(TARG) $(GOFLAGS) $(GOFILES) $(LDFLAGS)
+
+install: $(TARG) ../go/go
+	mkdir -p `../go/go env GOTOOLDIR`
+	cp $(TARG) `../go/go env GOTOOLDIR`
+	mkdir -p `../go/go env GOROOT`/src/cmd
+	cp -R ../cgo `../go/go env GOROOT`/src/cmd/
+	mkdir -p `../go/go env GOROOT`/src/pkg/runtime
+	cp -R ../../pkg/runtime/cgo `../go/go env GOROOT`/src/pkg/runtime/
+
+clean:
+	rm -f $(TARG)
diff -urN go.orig/src/cmd/cgo/zdefaultcc.go go/src/cmd/cgo/zdefaultcc.go
--- go.orig/src/cmd/cgo/zdefaultcc.go	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/cgo/zdefaultcc.go	2014-11-22 06:05:22.860520921 +0000
@@ -0,0 +1,6 @@
+// auto generated by go tool dist
+
+package main
+
+const defaultCC = `gcc`
+const defaultCXX = `g++`
diff -urN go.orig/src/cmd/go/Makefile go/src/cmd/go/Makefile
--- go.orig/src/cmd/go/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/go/Makefile	2014-11-22 06:05:22.860520921 +0000
@@ -0,0 +1,47 @@
+# Copyright 2009 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+# NOTE: This file is adapted to build the go tool using gccgo default
+
+GOFLAGS=-g
+LDFLAGS=-static-libgo -static-libgcc
+TARG=go
+GOFILES=\
+	discovery.go\
+	fix.go\
+	go11.go\
+	list.go\
+	pkg.go\
+	testflag.go\
+	vcs.go\
+	build.go\
+	doc.go\
+	fmt.go\
+	help.go\
+	main.go\
+	run.go\
+	signal_unix.go\
+	test.go\
+	version.go\
+	clean.go\
+	env.go\
+	get.go\
+	http.go\
+	signal.go\
+	tool.go\
+	vet.go\
+	zdefaultcc.go\
+	stdlib.go\
+	context.go\
+
+build: $(TARG)
+
+$(TARG): $(GOFILES)
+	gccgo -o $(TARG) $(GOFLAGS) $(GOFILES) $(LDFLAGS)
+
+install: $(TARG)
+	cp $(TARG) `./$(TARG) env GOROOT`/bin/
+
+clean:
+	rm -f $(TARG)
diff -urN go.orig/src/cmd/go/pkg.go go/src/cmd/go/pkg.go
--- go.orig/src/cmd/go/pkg.go	2014-10-01 01:50:23.000000000 +0000
+++ go/src/cmd/go/pkg.go	2014-11-22 06:05:22.860520921 +0000
@@ -106,7 +106,8 @@
 	p.Name = pp.Name
 	p.Doc = pp.Doc
 	p.Root = pp.Root
-	p.ConflictDir = pp.ConflictDir
+	// TODO(dfc) not available in libgo4.so
+	// p.ConflictDir = pp.ConflictDir
 	// TODO? Target
 	p.Goroot = pp.Goroot
 	p.Standard = p.Goroot && p.ImportPath != "" && !strings.Contains(p.ImportPath, ".")
@@ -484,6 +485,9 @@
 	imports := make([]*Package, 0, len(p.Imports))
 	deps := make(map[string]bool)
 	for i, path := range importPaths {
+		if _, ok := stdlib[path]; ok && buildContext.Compiler == "gccgo" {
+			continue
+		}
 		if path == "C" {
 			continue
 		}
diff -urN go.orig/src/cmd/go/stdlib.go go/src/cmd/go/stdlib.go
--- go.orig/src/cmd/go/stdlib.go	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/go/stdlib.go	2014-11-22 06:05:22.870520861 +0000
@@ -0,0 +1,141 @@
+// Copyright 2013 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+// packages from the standard lib. They are excluded
+// from the package map.
+
+var stdlib = map[string]bool{
+	"archive/tar":         true,
+	"archive/zip":         true,
+	"bufio":               true,
+	"bytes":               true,
+	"compress/bzip2":      true,
+	"compress/flate":      true,
+	"compress/gzip":       true,
+	"compress/lzw":        true,
+	"compress/zlib":       true,
+	"container/heap":      true,
+	"container/list":      true,
+	"container/ring":      true,
+	"crypto":              true,
+	"crypto/aes":          true,
+	"crypto/cipher":       true,
+	"crypto/des":          true,
+	"crypto/dsa":          true,
+	"crypto/ecdsa":        true,
+	"crypto/elliptic":     true,
+	"crypto/hmac":         true,
+	"crypto/md5":          true,
+	"crypto/rand":         true,
+	"crypto/rc4":          true,
+	"crypto/rsa":          true,
+	"crypto/sha1":         true,
+	"crypto/sha256":       true,
+	"crypto/sha512":       true,
+	"crypto/subtle":       true,
+	"crypto/tls":          true,
+	"crypto/x509":         true,
+	"crypto/x509/pkix":    true,
+	"database/sql":        true,
+	"database/sql/driver": true,
+	"debug/dwarf":         true,
+	"debug/elf":           true,
+	"debug/gosym":         true,
+	"debug/macho":         true,
+	"debug/pe":            true,
+	"encoding/ascii85":    true,
+	"encoding/asn1":       true,
+	"encoding/base32":     true,
+	"encoding/base64":     true,
+	"encoding/binary":     true,
+	"encoding/csv":        true,
+	"encoding/gob":        true,
+	"encoding/hex":        true,
+	"encoding/json":       true,
+	"encoding/pem":        true,
+	"encoding/xml":        true,
+	"errors":              true,
+	"expvar":              true,
+	"flag":                true,
+	"fmt":                 true,
+	"go/ast":              true,
+	"go/build":            true,
+	"go/doc":              true,
+	"go/format":           true,
+	"go/parser":           true,
+	"go/printer":          true,
+	"go/scanner":          true,
+	"go/token":            true,
+	"hash":                true,
+	"hash/adler32":        true,
+	"hash/crc32":          true,
+	"hash/crc64":          true,
+	"hash/fnv":            true,
+	"html":                true,
+	"html/template":       true,
+	"image":               true,
+	"image/color":         true,
+	"image/draw":          true,
+	"image/gif":           true,
+	"image/jpeg":          true,
+	"image/png":           true,
+	"index/suffixarray":   true,
+	"io":                  true,
+	"io/ioutil":           true,
+	"log":                 true,
+	"log/syslog":          true,
+	"math":                true,
+	"math/big":            true,
+	"math/cmplx":          true,
+	"math/rand":           true,
+	"mime":                true,
+	"mime/multipart":      true,
+	"net":                 true,
+	"net/http":            true,
+	"net/http/cgi":        true,
+	"net/http/cookiejar":  true,
+	"net/http/fcgi":       true,
+	"net/http/httptest":   true,
+	"net/http/httputil":   true,
+	"net/http/pprof":      true,
+	"net/mail":            true,
+	"net/rpc":             true,
+	"net/rpc/jsonrpc":     true,
+	"net/smtp":            true,
+	"net/textproto":       true,
+	"net/url":             true,
+	"os":                  true,
+	"os/exec":             true,
+	"os/signal":           true,
+	"os/user":             true,
+	"path":                true,
+	"path/filepath":       true,
+	"reflect":             true,
+	"regexp":              true,
+	"regexp/syntax":       true,
+	"runtime":             true,
+	"runtime/cgo":         true,
+	"runtime/debug":       true,
+	"runtime/pprof":       true,
+	"sort":                true,
+	"strconv":             true,
+	"strings":             true,
+	"sync":                true,
+	"sync/atomic":         true,
+	"syscall":             true,
+	"testing":             true,
+	"testing/iotest":      true,
+	"testing/quick":       true,
+	"text/scanner":        true,
+	"text/tabwriter":      true,
+	"text/template":       true,
+	"text/template/parse": true,
+	"time":                true,
+	"unicode":             true,
+	"unicode/utf16":       true,
+	"unicode/utf8":        true,
+	"unsafe":              true,
+}
diff -urN go.orig/src/cmd/go/test.go go/src/cmd/go/test.go
--- go.orig/src/cmd/go/test.go	2014-10-01 01:50:23.000000000 +0000
+++ go/src/cmd/go/test.go	2014-11-22 06:10:21.210523081 +0000
@@ -373,6 +373,9 @@
 		all := []string{}
 		for path := range deps {
 			if !build.IsLocalImport(path) {
+				if _, ok := stdlib[path]; ok && buildContext.Compiler == "gccgo" {
+					continue
+				}
 				all = append(all, path)
 			}
 		}
@@ -540,6 +543,9 @@
 	var stk importStack
 	stk.push(p.ImportPath + " (test)")
 	for _, path := range p.TestImports {
+		if _, ok := stdlib[path]; ok && buildContext.Compiler == "gccgo" {
+			continue
+		}
 		p1 := loadImport(path, p.Dir, &stk, p.build.TestImportPos[path])
 		if p1.Error != nil {
 			return nil, nil, nil, p1.Error
@@ -561,6 +567,9 @@
 	stk.push(p.ImportPath + "_test")
 	pxtestNeedsPtest := false
 	for _, path := range p.XTestImports {
+		if _, ok := stdlib[path]; ok && buildContext.Compiler == "gccgo" {
+			continue
+		}
 		if path == p.ImportPath {
 			pxtestNeedsPtest = true
 			continue
@@ -689,15 +698,17 @@
 
 	// The generated main also imports testing and regexp.
 	stk.push("testmain")
-	for dep := range testMainDeps {
-		if dep == ptest.ImportPath {
-			pmain.imports = append(pmain.imports, ptest)
-		} else {
-			p1 := loadImport(dep, "", &stk, nil)
-			if p1.Error != nil {
-				return nil, nil, nil, p1.Error
+	if buildContext.Compiler != "gccgo" {
+		for dep := range testMainDeps {
+			if dep == ptest.ImportPath {
+				pmain.imports = append(pmain.imports, ptest)
+			} else {
+				p1 := loadImport(dep, "", &stk, nil)
+				if p1.Error != nil {
+					return nil, nil, nil, p1.Error
+				}
+				pmain.imports = append(pmain.imports, p1)
 			}
-			pmain.imports = append(pmain.imports, p1)
 		}
 	}
 
diff -urN go.orig/src/cmd/go/zdefaultcc.go go/src/cmd/go/zdefaultcc.go
--- go.orig/src/cmd/go/zdefaultcc.go	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/go/zdefaultcc.go	2014-11-22 06:05:22.870520861 +0000
@@ -0,0 +1,6 @@
+// auto generated by go tool dist
+
+package main
+
+const defaultCC = `gcc`
+const defaultCXX = `g++`
diff -urN go.orig/src/cmd/gofmt/Makefile go/src/cmd/gofmt/Makefile
--- go.orig/src/cmd/gofmt/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ go/src/cmd/gofmt/Makefile	2014-11-22 06:20:45.240533951 +0000
@@ -0,0 +1,21 @@
+# Copyright 2009 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+# NOTE: This file is adapted to build the go tool using gccgo default
+
+GOFLAGS=-g
+LDFLAGS=-static-libgo -static-libgcc
+TARG=gofmt
+GOFILES=gofmt.go doc.go rewrite.go simplify.go
+
+build: $(TARG)
+
+$(TARG): $(GOFILES)
+	gccgo -o $(TARG) $(GOFLAGS) $(GOFILES) $(LDFLAGS)
+
+install: $(TARG)
+	cp $(TARG) `../go/go env GOROOT`/bin/
+
+clean:
+	rm -f $(TARG)
